#!/usr/bin/env node

var path = require('path');
var rewire = require('../src').rewire;
var pkg = require('pkg-dir');
var chalk = require('chalk');
var yargs = require('yargs')
  .usage('No worries TypeScript declaration manager (https://github.com/shyiko/tsdm)' +
    '\n\nUsage: tsdm')
  .command('rewire', 'Rewire type definition providers ' +
    '(should be called after `npm install`) (aliases: r)')
  .help('h').alias('h', 'help')
  .version(function () { return require('../package').version; })
  .strict();

pkg(process.cwd())
  .then(function (root) {
    var command = process.argv[2];
    switch (command) {
      case 'r':
      case 'rewire':
        rewire({path: root})
          .on('wired', function (e) {
            switch (e.type) {
              case 'ambient':
                var pkg = e.pkg;
                var ts = pkg.typescript;
                var def = ts && [].concat(ts.definition || ts.definitions)
                    .map(function (name) {
                      return path.basename(name);
                    });
                console.log(chalk.green('Linked ') +
                  chalkifyPath(path.relative(process.cwd(), pkg._where)) +
                  chalk.gray((def ? ' (' + def.join(', ') + ')' : '')));
                break;
              case 'scoped':
                console.log(chalk.green('Updated ') +
                  chalkifyPath(path.relative(process.cwd(), e.file)));
                break;
              default:
                throw new Error();
            }
          })
          .on('warn', function (e) {
            console.warn('WARN: ' + e);
          })
          .on('error', function (err) {
            console.error(err.stack);
            process.exit(4);
          });
        break;
      default:
        yargs.showHelp();
        if (command) {
          console.error('Unknown command `' + command + '`.');
        }
        process.exit(3);
    }
  });

function chalkifyPath(p) {
  var d;
  if (~(d = p.lastIndexOf(path.sep))) {
    p = chalk.gray(p.slice(0, d + 1)) + p.slice(d + 1)
  }
  return p;
}
